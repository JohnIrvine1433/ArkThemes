#!/bin/bash

# Notes
#
# https://github.com/TadMSTR/ArkThemes
#

export TERM=linux
sudo chmod 666 /dev/tty1 >/dev/null 2>&1

source ./helper

#
# Joystick controls
#

isitoga=$(dmesg | grep odroidgo2-joypad/input/input2)
if [ ! -z "$isitoga" ]; then
  sudo ./oga_controls &  >/dev/null 2>&1
else
  sudo ./rg351_controls &  >/dev/null 2>&1
fi

#
# ArkThemes Configuration
#
github_ark_owner="JohnIrvine1433" #Used for ArkThemes update function
github_ark_repo="ArkThemes" #Used for ArkThemes update function
current_ark_version="1.0.0"

#
# ArkThemes DÃ©fault Settings
#
source arkthemes.cfg
if [[ $? -eq 1 ]]; then
  arkthemes_autocheckupdate="off" #Do note check for update at startup
  themes_autocheckupdate="off" #Do note check for update at startup
fi

#
# Themes collection configuration
# Themes need to be stored on github and repositories starting with es-theme
#
github_user="Jetup13"   #github user's name, alternative example "EmuELEC"
collection_name="Jetup" #Name that will be displayed
backtitle="ArkThemes - ${collection_name} collection"

#
# Reused global variables
#
onlinethemes=()
installedthemes=()
outdatedthemes=()
changelog=()
themes_updates_checked=0
arkthemes_updates_checked=0
latest_ark_version=""
arkthemes_outdated=""

#
# Options
#
shopt -s extglob # required for extented pattern recognition

function GetChangeLog {
		local theme=$1
    local temparr=()
    unset changelog

    SAVEIFS=$IFS
    IFS=$'\n' temparr=($(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | grep '"message": \|"date": ' | sed -e 's/.*\"message\": \"//' | sed -e 's/.*\"date\": \"//'))
    IFS=$SAVEIFS
    temparr=("${temparr[@]%,}")
    temparr=("${temparr[@]//\"/}")

    i=0
    for value in "${temparr[@]}"; do
      if [[ $i -eq 0 ]]; then
        i=1
        echo $i
      elif [[ $i -eq 1 ]]; then
        changelog+=("$value")
        i=2
        echo $i
      elif [[ $i -eq 2 ]]; then
        changelog+=("$value")
        i=0
        echo $i
      fi
    done
}

function LoadInstalledThemes {
  #(re)Load already installed themes
  unset installedthemes
  installedthemes=(/roms/themes/*) # This creates an array of the full paths to all subdirs
  installedthemes=("${installedthemes[@]##*/}") # This removes the path prefix, leaving just the dir names
}

function InitLoader() {
	local cmd
	local retval

  dialog --clear
  dialog --infobox "Initialization... Please wait !" 5 50
  sleep 1

  wget -q --spider http://google.com

  if [ $? -eq 0 ]; then
    #Load online es-theme repositories
    SAVEIFS=$IFS
    IFS=$'\n' onlinethemes=($(wget --no-check-certificate -qO - "https://api.github.com/users/${github_user}/repos" | grep '\"name\": \"es-theme' | sed -e 's/\"name\": \"\(.*\)\",/\1/'))
    IFS=$SAVEIFS
    onlinethemes=("${onlinethemes[@]/#+([[:blank:]])/}") # remove leading space/tab from each element
    onlinethemes=("${onlinethemes[@]/%+([[:blank:]])/}") # remove trailing space/tab from each element

    LoadInstalledThemes

    if [[ "$themes_autocheckupdate" == "on" ]]; then
      CheckThemesUpdates
    fi
    if [[ "$arkthemes_autocheckupdate" == "on" ]]; then
      CheckArkThemesUpdates
    fi

    MainMenu

  else
    cmd=$(dialog --backtitle "ArkThemes" --yes-label "Try again" --no-label "Exit" --yesno "\nInternet connection required!" 0 0 2>&1 >/dev/tty1)

    retval=$?
    case $retval in
    0)
      InitLoader
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function InstallTheme() {
  local theme=$1
	local latest
  local REP_URL
  local ABS_PATH
  local ABS_DIR
	local temp
  local THEME_CONTENT
	local cmd
	local retval

    dialog --clear
    dialog --infobox "Downloading the update..." 5 50

  latest=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"date\":/!d;q' | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')

  REP_URL="https://api.github.com/repos/${github_user}/${theme}/zipball"

  ABS_PATH=$(readlink -f "$0")
  ABS_DIR=$(dirname "$ABS_PATH")

  mkdir -p /dev/shm/theme_update_temp #create a temp folder in RAM

  #Downloading archive
  sudo wget -q "$REP_URL" -O /dev/shm/theme_update_temp/update.zip
  #sudo wget -O "/dev/shm/theme_update_temp/update.zip" -c -e robots=off -np --progress=dot "$REP_URL" 2>&1 | stdbuf -oL sed -e 's\nothing to do\100%\g' | stdbuf -oL grep --line-buffered "%" | stdbuf -oL cut -f1 -d'%' | stdbuf -oL rev | stdbuf -oL cut -f1 -d' ' | stdbuf -oL rev | dialog --guage "Downloading: ${theme}" 0 0

  if unzip -qt "/dev/shm/theme_update_temp/update.zip" | grep 'No errors detected'; then
    dialog --clear
    dialog --infobox "Installing the update..." 5 50
    sleep 1

    #Unzipping archive
    sudo unzip -qo "/dev/shm/theme_update_temp/update.zip" -d "/dev/shm/theme_update_temp/" #unzip directly in RAM
    #Extract the folder's name created from the archive
    #temp=$(find /dev/shm/theme_update_temp -maxdepth 1 -type d -name "${github_user}*" | sed 's/\/dev\/shm\/theme_update_temp\///g')
    temp=$(find /dev/shm/theme_update_temp -maxdepth 1 -type d -name "${github_user}*")
    temp="${temp##*/}"
    #Init the variable
    THEME_CONTENT="/dev/shm/theme_update_temp/${temp}/*"
    #Create folder if necessary
    mkdir -p /roms/themes/$theme
    #Overwritting existing files
    cp -rf $THEME_CONTENT /roms/themes/$theme
    #Create the theme's log file for version management
    echo $latest > ${theme}.log
    #echo $latest >> ${theme}.log #alternative to keep every version installed, reading also need to be modified
    #Deleting temporary files
    sudo rm -rf /dev/shm/theme_update_temp #remove the temp folder from RAM

    LoadInstalledThemes #reload liste of installed themes (in case of install)
    outdatedthemes=( "${outdatedthemes[@]/${theme}/}" )#in case of update, remove theme from outdated themes list

    dialog --clear --backtitle "${backtitle}" --msgbox "Theme $theme updated successfully!" 0 0 2>&1 >/dev/tty1

    MainMenu

  else
    #Install failed
    #Deleting temporary files
    sudo rm -rf /dev/shm/theme_update_temp #remove the temp folder from RAM

    cmd=$(dialog --yes-label "Try again" --no-label "Exit" --yesno "Theme update have failed because the archive did not download correctly. Check your connection and try again." 0 0 2>&1 >/dev/tty1)
    retval=$?
    case $retval in
    0)
      UpdateMenu
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function RemoveTheme() {
  local theme="$1"

  dialog --clear
  dialog --infobox "Removing $theme ..." 5 50

  sudo rm -rf /roms/themes/$theme
  sudo rm -f ${theme}.log

  LoadInstalledThemes

  dialog --clear --backtitle "${backtitle}" --msgbox "Theme $theme successfully removed!" 0 0 2>&1 >/dev/tty1

  UninstallMenu
}

function UninstallMenu() {
  local themes2remove
  local theme
	local options
  local title
	local	cmd
	local choices
	local retval

  if [[ -z "$1" ]]; then
    # Uninstall managed themes
    themes2remove=($(comm -12 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes2remove[@]}"; do
      options+=($theme "Uninstall")
    done
    options+=(Other "System themes")
    title="[ Remove ${collection_name} Themes ]"
  else
    # Uninstall non managed themes
    themes2remove=($(comm -13 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes2remove[@]}"; do
      options+=($theme "Uninstall")
    done
    title="\Zb\Z1[ Caution - These themes cannot be reinstalled ]"
  fi

  cmd=(dialog --colors --backtitle "${backtitle}" --title "$title" --menu "Select theme from the list:" "15" "50" "15")

  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "${choices[0]}" == "Other" ]; then
      UninstallMenu "${choices[0]}"
    else
      RemoveTheme "${choices[0]}"
    fi
    ;;
  1)
    MainMenu
    ;;
  esac
}

function UpdateSubMenu {
  local theme="$1"
  local commitmsg
	local cmd
	local retval

  theme=${theme/HELP }
  commitmsg=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"message\":/!d;q' | sed -e 's/\"message\": \"//' | sed -e 's/\",//')

  cmd=$(dialog --backtitle "${backtitle}" --yes-label "Update" --no-label "Back" --yesno "Theme : ${theme}, update content :\n${commitmsg}" 0 0 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    themes_updates_checked=0
    InstallTheme "$theme"
    ;;
  1)
    UpdateMenu
    ;;
  esac
}

function UpdateMenu() {
  local theme
	local options
	local cmd
  local choices
  local retval

  if [[ $themes_updates_checked -eq 0 ]]; then
    CheckThemesUpdates
  fi

  if [[ -z "$outdatedthemes" ]]; then
    dialog --backtitle "${backtitle}" --yesno "No updates available... Check again for updates ?" 0 0 2>&1 >/dev/tty1
    retval=$?
    case $retval in
    0)
      themes_updates_checked=0
      CheckThemesUpdates
      ;;
    1)
      MainMenu
      ;;
    esac
  fi

  # Select themes to update
  for theme in "${outdatedthemes[@]}"; do
    options+=($theme "Update")
  done

  cmd=(dialog --help-button --help-label "Details" --ok-label "Go for it!" --cancel-label "Back" --backtitle "${backtitle}" --title "[ New releases ]" --menu "Select theme to update:" "15" "50" "15")
  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    themes_updates_checked=0
    InstallTheme "${choices[0]}"
    ;;
  1)
    MainMenu
    ;;
  2)
    UpdateSubMenu "${choices[0]}"
    ;;
  esac
}

function CheckThemesUpdates() {
  local theme
	local latest
	local current
  local retval

  dialog --clear
  dialog --infobox "Checking for themes updates... Please wait !" 5 50

  #(re)Load installed themes with new release
  unset outdatedthemes
  for theme in "${onlinethemes[@]}"; do
    if [ -d "/roms/themes/$theme" ]; then
      latest=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"date\":/!d;q' | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')
      if [ -e "${theme}.log" ]; then
        current=$(cat "${theme}.log")
        #current=$(head -n 1 ${theme}.log) #Alternative when every version installed is kept - see file creation
      fi
      if [[ "$current" != "$latest" ]]; then
        outdatedthemes+=("$theme")
      fi
    fi
  done

  themes_updates_checked=1

  if [[ -z $outdatedthemes ]]; then
    dialog --clear
    dialog --infobox "No updates available..." 5 50
  else
    dialog --clear
    dialog --infobox "New updates available !!" 5 50
  fi
}

function CheckArkThemesUpdates() {

  dialog --clear
  dialog --infobox "Checking for ArkThemes updates... Please wait !" 5 50
  sleep 1
  #Get latest ArkThemes tag version
  latest_ark_version=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_ark_owner}/${github_ark_repo}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  arkthemes_updates_checked=1

  if [[ "$latest_ark_version" != "$current_ark_version" ]]; then
    arkthemes_outdated=1
    dialog --clear
    dialog --infobox "A new release is available !!" 5 50
  else
    arkthemes_outdated=0
    dialog --clear
    dialog --infobox "ArkThemes is up to date..." 5 50
  fi

}

function InstallSubMenu {
  local theme="$1"
  local description
	local cmd
	local retval

  theme=${theme/HELP }
	description=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}" | sed '/\"description\":/!d;q' | sed -e 's/\"description\": \"//' | sed -e 's/\",//')

  cmd=$(dialog --backtitle "${backtitle}" --yes-label "Install" --no-label "Back" --yesno "${theme} description : ${description}" 0 0 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$theme"
    ;;
  1)
    InstallMenu
    ;;
  esac
}

function InstallMenu() {
  local theme
	local options
	local cmd
  local choices
  local retval

  if [[ -z "$1" ]]; then
    # Install new theme
    for theme in "${onlinethemes[@]}"; do
      if [ ! -d "/roms/themes/$theme" ]; then
        options+=($theme "Install")
      fi
    done
    options+=(Other "Reinstall")
    title="[ Install ${collection_name} Themes ]"
  else
    # Reinstall a theme
    for theme in "${onlinethemes[@]}"; do
      if [ -d "/roms/themes/$theme" ]; then
        options+=($theme "Reinstall")
      fi
    done
    title="[ Reinstall ${collection_name} Themes ]"
  fi

  cmd=(dialog --help-button --help-label "Details" --ok-label "Go for it!" --cancel-label "Back" --backtitle "${backtitle}" --title "$title" --menu "Select theme from the list:" "15" "50" "15")
  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "${choices[0]}" == "Other" ]; then
      InstallMenu "${choices[0]}"
    else
      InstallTheme "${choices[0]}"
    fi
    ;;
  1)
    MainMenu
    ;;
  2)
    if [ "${choices[0]}" != "Other" ]; then
      InstallSubMenu "${choices[0]}"
    fi
    ;;
  esac
}

function ExitApp() {
  clear
  pgrep -f oga_controls | sudo xargs kill -9 >/dev/null 2>&1
  pgrep -f rg351_controls | sudo xargs kill -9 >/dev/null 2>&1
  sudo systemctl restart emulationstation
}

function UpdateArkThemes() {
  local UPDATE_URL="https://api.github.com/repos/${github_ark_owner}/${github_ark_repo}/zipball"
  local PAYLOAD=/dev/shm/payload_temp/*

  dialog --clear
  dialog --infobox "Downloading ArkThemes update..." 5 50

  cd /roms/tools
  sudo sh -c 'printf "\033c" > /dev/tty1'
  mkdir -p /dev/shm/payload_temp #create a temp folder in RAM

  sudo wget -q "$UPDATE_URL" -O /dev/shm/payload_temp/update.zip
  if unzip -qt /dev/shm/payload_temp/update.zip | grep 'No errors detected'; then
    dialog --clear
    dialog --infobox "Installing ArkThemes update..." 5 50
    #Unzipping archive
    sudo unzip -qo /dev/shm/payload_temp/update.zip -d /dev/shm/payload_temp/ #unzip directly in RAM
    rm /dev/shm/payload_temp/update.zip
    #Overwritting existing files
    cp -rf $PAYLOAD ./
    sudo chmod 777 ./*.sh #make sure newly downloaded scripts have right permission

    dialog --clear
    dialog --infobox "ArkThemes successfully updated !\nPlease relaunch ArkThemes." 5 50
  else
    dialog --clear
    dialog --infobox "Theme update have failed because the archive did not download correctly. Check your connection and try again." 10 50
  fi

  #Deleting temporary files...
  sudo rm -rf /dev/shm/payload_temp #remove the temp folder from RAM
}

function ChangeLogMenu() {
  local theme
	local options
	local cmd
  local choices
  local retval

  if [[ -z $1 ]]; then
    # Load installed themes
    for theme in "${installedthemes[@]}"; do
      options+=($theme "See Changelog")
    done

    cmd=(dialog --cancel-label "Back" --backtitle "${backtitle}" --title "[ Themes Changelog ]" --menu "Select theme to update:" "15" "50" "15")
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

    retval=$?
    case $retval in
    0)
      ChangeLogMenu "${choices[0]}"
      ;;
    1)
      AdvancedMenu
      ;;
    esac
  else
    GetChangeLog $1

    SAVEIFS=$IFS
    IFS=$'\n'
    dialog --clear --backtitle "${backtitle}" --msgbox "$theme changelog :${changelog[*]}" 0 0 2>&1 >/dev/tty1
    IFS=$SAVEIFS

    AdvancedMenu
  fi
}

function SettingsMenu() {
  local cmd
  local options
  local choices
  local choice
  local retval

  cmd=(dialog --separate-output --backtitle "${backtitle}" --title " [ Startup Options ] " --checklist "Select loading options\n NB : ArkThemes initialisation will take longer espacially if check for themes updates is activated :" "15" "50" "15")

  options=(
        ArkThemes "Check for updates" $arkthemes_autocheckupdate
        Themes "Check for update" $themes_autocheckupdate
  )

  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    for choice in $choices; do
      case $choice in
      ArkThemes) arkthemes_autocheckupdate="on" ;;
      Themes) themes_autocheckupdate="on" ;;
      esac
    done
    echo 'arkthemes_autocheckupdate=\"${arkthemes_autocheckupdate}\"' > arkthemes.cfg
    echo 'themes_autocheckupdate=\"${themes_autocheckupdate}\"' >> arkthemes.cfg
    ;;
  1)
    MainMenu
    ;;
  esac
}

function AdvancedMenu() {
  local cmd
  local options
  local choices
  local choice
  local retval

  cmd=(dialog --no-cancel --backtitle "${backtitle}" --title " [ Advanced Menu ] " --menu "You can use UP/DOWN on the D-pad and A to select:" "15" "50" "15")

  options=(
        A "Update ArkThemes"
        B "Themes Changelog"
        C "Settings"
  )

  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    for choice in $choices; do
      case $choice in
      A)
        if [[ $arkthemes_updates_checked -eq 0 ]]; then
          CheckArkThemesUpdates
        else
          if [[ $arkthemes_outdated -eq 0 ]]; then
            dialog --clear --backtitle "ArkThemes" --msgbox "ArkThemes is up to date." 0 0 2>&1 >/dev/tty1
            AdvancedMenu
          else
            UpdateArkThemes
          fi
        fi
        ;;
      B) ChangeLogMenu ;;
      C) SettingsMenu ;;
      esac
    done
    ;;
  1)
    MainMenu
    ;;
  esac
}

function MainMenu() {
  local cmd
	local options
  local choices
	local choice
  local retval

  cmd=(dialog --no-cancel --backtitle "${backtitle}" --title " [ Main Menu ] " --menu "You can use UP/DOWN on the D-pad and A to select:" "15" "50" "15")

  options=(
        A "Install a theme"
        B "Update a theme"
        C "Uninstall a theme"
        D "Advanced Menu"
        E "Exit to emulationstation"
  )

  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    for choice in $choices; do
      case $choice in
      A) InstallMenu ;;
      B) UpdateMenu ;;
      C) UninstallMenu ;;
      D) AdvancedMenu ;;
      E) ExitApp ;;
      esac
    done
    ;;
  1)
    ExitApp
    ;;
  esac
}

InitLoader
