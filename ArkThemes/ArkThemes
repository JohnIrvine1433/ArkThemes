#!/bin/bash

# Notes
#
# https://github.com/TadMSTR/ArkThemes
#

export TERM=linux
sudo chmod 666 /dev/tty1 >/dev/null 2>&1

source ./helper

#
# Joystick controls
#

isitoga=$(dmesg | grep odroidgo2-joypad/input/input2)
if [ ! -z "$isitoga" ]; then
  sudo ./oga_controls &  >/dev/null 2>&1
else
  sudo ./rg351_controls &  >/dev/null 2>&1
fi

#
# Configuration
# Themes need to be stored on github and repositories starting with es-theme
#
themes_rep="/roms/themes/" #themes installation path with trailing slash
ram_folder="/dev/shm/theme_update_temp" # temp folder in RAM used during installation

github_user="Jetup13"   #github user's name, alternative example "EmuELEC"
collection_name="Jetup" #Name that will be displayed

#
# Reused global variables
#
onlinethemes=()
installedthemes=()
outdatedthemes=()
changelog=()

#
# Options
#
shopt -s extglob # required for extented pattern recognition

function GetChangeLog {
		local theme=$1
    local temparr=()

    SAVEIFS=$IFS
    IFS=$'\n' temparr=($(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | grep '"message": \|"date": ' | sed -e 's/.*\"message\": \"//' | sed -e 's/.*\"date\": \"//'))
    IFS=$SAVEIFS
    temparr=("${temparr[@]%,}")
    temparr=("${temparr[@]//\"/}")

    i=0
    for value in "${temparr[@]}"; do
      if [[ $i -eq 0 ]]; then
        i=1
        echo $i
      elif [[ $i -eq 1 ]]; then
        changelog+=("$value")
        i=2
        echo $i
      elif [[ $i -eq 2 ]]; then
        changelog+=("$value")
        i=0
        echo $i
      fi
    done
}

function InitLoader() {
	local theme
	local latest
	local current
	local cmd
	local retval

  dialog --infobox "Initialization..." 0 0

  wget -q --spider http://google.com

  if [ $? -eq 0 ]; then
    #Load online es-theme repositories
    SAVEIFS=$IFS
    IFS=$'\n' onlinethemes=($(wget --no-check-certificate -qO - "https://api.github.com/users/${github_user}/repos" | grep '\"name\": \"es-theme' | sed -e 's/\"name\": \"\(.*\)\",/\1/'))
    IFS=$SAVEIFS
    onlinethemes=("${onlinethemes[@]/#+([[:blank:]])/}") # remove leading space/tab from each element
    onlinethemes=("${onlinethemes[@]/%+([[:blank:]])/}") # remove trailing space/tab from each element

    #Load already installed themes
    installedthemes=$themes_rep
    installedthemes+="*" # This creates an array of the full paths to all subdirs
    installedthemes=("${installedthemes[@]##*/}") # This removes the path prefix, leaving just the dir names

    #Load installed themes with new release
    for theme in "${onlinethemes[@]}"; do
      if [ -d "$themes_rep$theme" ]; then
				latest=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"date\":/!d;q' | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')
        if [ -e "${theme}.log" ]; then
          current=$(cat "${theme}.log")
          #current=$(head -n 1 ${theme}.log) #Alternative when every version installed is kept - see file creation
        fi
        if [ $current != $latest ]; then
          outdatedthemes+=("$theme")
        fi
      fi
    done

    MainMenu

  else
    cmd=$(dialog --clear --backtitle "System" --yes-label "Try again" --cancel-label "Exit" --yesno "\nInternet connection required!" 0 0 2>&1 >/dev/tty1)

    retval=$?
    case $retval in
    0)
      InitLoader
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function InstallTheme() {
  local theme=$1
	local latest
  local REP_URL
  local ABS_PATH
  local ABS_DIR
	local temp
  local THEME_CONTENT
	local cmd
	local retval

  latest=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"date\":/!d;q' | sed -e 's/\"date\": \"//' | sed -e 's/\"//' | sed -e 's/ *//')

  REP_URL="https://api.github.com/repos/${github_user}/${theme}/zipball"

  ABS_PATH=$(readlink -f "$0")
  ABS_DIR=$(dirname "$ABS_PATH")

  mkdir -p $ram_folder #create a temp folder in RAM

  #Downloading archive
  #sudo wget -q "$REP_URL" -O /dev/shm/theme_update_temp/update.zip
  sudo wget -O $ram_folder"/update.zip" -c -e robots=off -np --progress=dot "$REP_URL" 2>&1 |
    stdbuf -oL sed -e 's\nothing to do\100%\g' |
    stdbuf -oL grep --line-buffered "%" |
    stdbuf -oL cut -f1 -d'%' | stdbuf -oL rev |
    stdbuf -oL cut -f1 -d' ' | stdbuf -oL rev |
    dialog --guage "Downloading: ${theme}" 0 100

  if unzip -qt $ram_folder"/update.zip" | grep 'No errors detected'; then
    dialog --clear --infobox "Installing the update..." 0 0

    #Unzipping archive
    sudo unzip -qo $ram_folder"/update.zip" -d $ram_folder"/" #unzip directly in RAM
    #Extract the folder's name created from the archive
    #temp=$(find /dev/shm/theme_update_temp -maxdepth 1 -type d -name "${github_user}*" | sed 's/\/dev\/shm\/theme_update_temp\///g')
    temp=$(find $ram_folder -maxdepth 1 -type d -name "${github_user}*")
    temp="${temp##*/}"
    #Init the variable
    THEME_CONTENT="${ram_folder}/${temp}/*"
    #Create folder if necessary
    mkdir -p $themes_rep$theme
    #Overwritting existing files
    cp -rf $THEME_CONTENT $themes_rep$theme
    #Create the theme's log file for version management
    echo $latest > ${theme}.log
    #echo $latest >> ${theme}.log #alternative to keep every version installed, reading also need to be modified
    #Deleting temporary files
    sudo rm -rf $ram_folder #remove the temp folder from RAM

    dialog --clear --infobox "Theme $theme updated successfully!" 0 0

    sleep 3

    MainMenu

  else
    #Theme update have failed
    #Deleting temporary files
    sudo rm -rf $ram_folder #remove the temp folder from RAM

    cmd=$(dialog --clear --yes-label "Try again" --cancel-label "Exit" --yesno "Theme update have failed because the archive did not download correctly. Check your connection and try again." 0 0 2>&1 >/dev/tty1)
    retval=$?
    case $retval in
    0)
      UpdateMenu
      ;;
    1)
      ExitApp
      ;;
    esac
  fi
}

function RemoveTheme() {
  local theme="$1"

  dialog --clear --infobox "Removing $theme ..." 0 0

  sudo rm -rf $themes_rep$theme
  sudo rm -f ${theme}.log

  dialog --clear --infobox "Theme $theme successfully removed!" 0 0
  sleep 3
  MainMenu
}

function UninstallMenu() {
  local themes2remove
  local theme
	local options
  local title
	local	cmd
	local choices
	local retval

  if [[ -z "$1" ]]; then
    # Uninstall managed themes
    themes2remove=($(comm -12 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes2remove[@]}"; do
      options+=($theme "Uninstall")
    done
    options+=(Other "Uninstall a system's theme")
    title="[ Remove ${collection_name} Themes ]"
  else
    # Uninstall non managed themes
    themes2remove=($(comm -13 <(printf '%s\n' "${onlinethemes[@]}" | LC_COLLATE=C sort -f) <(printf '%s\n' "${installedthemes[@]}" | LC_COLLATE=C sort -f)))
    for theme in "${themes2remove[@]}"; do
      options+=($theme "Uninstall")
    done
    title="\Zb\Z1[ Caution - These themes cannot be reinstalled ]"
  fi

  cmd=(dialog --colors --clear --backtitle "Themes removal" --title "$title" --menu "Select theme from the list:" "15" "50" "15")

  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "${choices[0]}" == "Other" ]; then
      UninstallMenu "${choices[0]}"
    else
      RemoveTheme "${choices[0]}"
    fi
    ;;
  1)
    MainMenu
    ;;
  esac
}

function UpdateSubMenu {
  local theme="$1"
  local commitmsg
	local cmd
	local retval

  commitmsg=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}/commits" | sed '/\"message\":/!d;q' | sed -e 's/\"message\": \"//' | sed -e 's/\",//')

  cmd=$(dialog --clear --backtitle "${theme}" --yes-label "Update" --cancel-label "Back" --yesno "Update content :\n${commitmsg}" 0 0 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$theme"
    ;;
  1)
    UpdateMenu
    ;;
  esac
}

function UpdateMenu() {
  local theme
	local options
	local cmd
  local choices
  local retval

  # Select themes to update
  for theme in "${outdatedthemes[@]}"; do
    options+=($theme "Update")
  done

  cmd=(dialog --clear --help-button --help-label "Details" --ok-label "Go for it!" --cancel-label "Back" --backtitle "${collection_name} Themes" --title "[ New releases ]" --menu "Select theme to update:" "15" "50" "15")
  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "${choices[0]}"
    ;;
  1)
    MainMenu
    ;;
  2)
    UpdateSubMenu "$theme"
    ;;
  esac
}

function InstallSubMenu {
  local theme="$1"
  local description
	local cmd
	local retval

	description=$(wget --no-check-certificate -qO - "https://api.github.com/repos/${github_user}/${theme}" | sed '/\"description\":/!d;q' | sed -e 's/\"description\": \"//' | sed -e 's/\",//')

  cmd=$(dialog --clear --backtitle "${theme}" --yes-label "Install" --cancel-label "Back" --yesno "Theme description :\n${description}" 0 0 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    InstallTheme "$theme"
    ;;
  1)
    InstallMenu
    ;;
  esac
}

function InstallMenu() {
  local theme
	local options
	local cmd
  local choices
  local retval

  if [[ -z "$1" ]]; then
    # Install new theme
    for theme in "${onlinethemes[@]}"; do
      if [ ! -d "/roms/themes/$theme" ]; then
        options+=($theme "Install")
      fi
    done
    options+=(Other "Reinstall an existing theme")
    title="[ Install ${collection_name} Themes ]"
  else
    # Reinstall a theme
    for theme in "${onlinethemes[@]}"; do
      if [ -d "/roms/themes/$theme" ]; then
        options+=($theme "Reinstall")
      fi
    done
    title="[ Reinstall ${collection_name} Themes ]"
  fi

  cmd=(dialog --clear --help-button --help-label "Details" --ok-label "Go for it!" --cancel-label "Back" --backtitle "${collection_name} Themes" --title "$title" --menu "Select theme from the list:" "15" "50" "15")
  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    if [ "${choices[0]}" == "Other" ]; then
      InstallMenu "${choices[0]}"
    else
      InstallTheme "${choices[0]}"
    fi
    ;;
  1)
    MainMenu
    ;;
  2)
    if [ "${choices[0]}" != "Other" ]; then
      InstallSubMenu "${choices[0]}"
    fi
    ;;
  esac
}

function ExitApp() {
  pgrep -f oga_controls | sudo xargs kill -9 >/dev/null 2>&1
  pgrep -f rg351_controls | sudo xargs kill -9 >/dev/null 2>&1
  sudo systemctl restart emulationstation
}

function UpdateArkThemes() {

  UPDATE_URL="https://github.com/TadMSTR/ArkThemes/releases/download/update/ArkThemes.zip"
  PAYLOAD=/dev/shm/payload_temp/*
  cd /roms/tools
  sudo sh -c 'printf "\033c" > /dev/tty1'
  printf "\nStarting update of ArkThemes..."
  mkdir -p /dev/shm/payload_temp #create a temp folder in RAM

  printf "\nDownloading archive for ArkThemes...\n"
  sudo wget -q "$UPDATE_URL" -O /dev/shm/payload_temp/update.zip
  if unzip -qt /dev/shm/payload_temp/update.zip | grep 'No errors detected'; then
    printf "\nUnzipping archive..."
    sudo unzip -qo /dev/shm/payload_temp/update.zip -d /dev/shm/payload_temp/ #unzip directly in RAM
    rm /dev/shm/payload_temp/update.zip
    printf "\nOverwritting existing files..."
    cp -rf $PAYLOAD ./
    sudo chmod 777 ./*.sh #make sure newly downloaded scripts have right permission
    printf "\nAnberThemes updated successfully."
    sleep 3
  else
    printf "\nTheme update have failed because the archive did not download correctly."
    printf "\nCheck your connection and try again.\n"
    sleep 6
  fi
  printf "\nDeleting temporary files...\n"
  sudo rm -rf /dev/shm/payload_temp #remove the temp folder from RAM

  dialog --backtitle "System" --infobox "\nPlease launch ArkThemes again and enjoy ..." 5 50 >/dev/tty1
  sleep 3

  ExitMenu
}

function MainMenu() {
  local cmd
	local options
  local choices
	local choice
  local retval

  cmd=(dialog --clear --no-cancel --backtitle "${collection_name} Themes" --title " [ Main Menu ] " --menu "You can use UP/DOWN on the D-pad and A to select:" "15" "50" "15")

  if [[ -n "${outdatedthemes[*]}" ]]; then
    options=(
      0 "Update(s) available!"
      1 "Install a theme"
      2 "Uninstall a theme"
      3 "Update ArkThemes"
      4 "Exit to emulationstation"
    )
  else
    options=(
      1 "Install a theme"
      2 "Uninstall a theme"
      3 "Update ArkThemes"
      4 "Exit to emulationstation"
    )
  fi

  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty1)

  retval=$?
  case $retval in
  0)
    for choice in $choices; do
      case $choice in
      0) UpdateMenu ;;
      1) InstallMenu ;;
      2) UninstallMenu ;;
      3) UpdateArkThemes ;;
      4) ExitApp ;;
      esac
    done
    ;;
  1)
    ExitApp
    ;;
  esac
}

InitLoader
